generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Signal {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  code       String
  value      Value    @relation(fields: [value_id], references: [id])
  value_id   String
  source     Process  @relation("signal_source", fields: [source_id], references: [id])
  source_id  String
  target     Process  @relation("signal_target", fields: [target_id], references: [id])
  target_id  String
}

model Process {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  computer    Computer @relation(fields: [computer_id], references: [id])
  computer_id String   @unique
  sent        Signal[] @relation("signal_source")
  received    Signal[] @relation("signal_target")
  children    Child[]
}

model Child {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  parent     Process  @relation(fields: [parent_id], references: [id])
  parent_id  String
}

model Expression {
  id          String     @id @default(uuid())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  dependent   Variable[] @relation("variable_dependent")
  independent Variable[] @relation("variable_independent")
  bound       Variable[] @relation("variable_bound")
  free        Variable[] @relation("variable_free")
}

model Type {
  id          String     @id @default(uuid())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  computer    Computer   @relation(fields: [computer_id], references: [id])
  computer_id String     @unique
  machine     Machine    @relation(fields: [machine_id], references: [id])
  machine_id  String     @unique
  instances   Variable[]
}

model Variable {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  computer       Computer    @relation(fields: [computer_id], references: [id])
  computer_id    String      @unique
  type           Type        @relation(fields: [type_id], references: [id])
  type_id        String
  machine        Machine     @relation(fields: [machine_id], references: [id])
  machine_id     String      @unique
  bound          Expression? @relation("variable_bound", fields: [bound_id], references: [id], onDelete: Cascade)
  bound_id       String?
  free           Expression? @relation("variable_free", fields: [free_id], references: [id], onDelete: Cascade)
  free_id        String?
  dependent      Expression? @relation("variable_dependent", fields: [dependent_id], references: [id], onDelete: Cascade)
  dependent_id   String?
  independent    Expression? @relation("variable_independent", fields: [independent_id], references: [id], onDelete: Cascade)
  independent_id String?
}

model Transition {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  start      State    @relation("transition_start", fields: [start_id], references: [id])
  start_id   String
  finish     State    @relation("transition_finish", fields: [finish_id], references: [id])
  finish_id  String
  event      Event    @relation(fields: [event_id], references: [id])
  event_id   String
  machine    Machine  @relation(fields: [machine_id], references: [id])
  machine_id String
}

model Event {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  value       Value        @relation(fields: [value_id], references: [id])
  value_id    String
  transitions Transition[]
}

model State {
  id         String       @id @default(uuid())
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  value      Value        @relation(fields: [value_id], references: [id])
  value_id   String
  starts     Transition[] @relation("transition_start")
  finishes   Transition[] @relation("transition_finish")
}

model Machine {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  computer    Computer     @relation(fields: [computer_id], references: [id])
  computer_id String       @unique
  network     Network      @relation(fields: [network_id], references: [id])
  network_id  String
  state       Transition[]
  variables   Variable[]
  types       Type[]
}

model Description {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  value      Value      @relation(fields: [value_id], references: [id])
  value_id   String
  computers  Computer[]
}

model Value {
  id            String        @id @default(uuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  simulation    Simulation    @relation(fields: [simulation_id], references: [id])
  simulation_id String        @unique
  value         String
  inputs        Input[]
  output        Output[]
  signals       Signal[]
  parameters    Parameter[]
  feedback      Feedback[]
  states        State[]
  events        Event[]
  descriptions  Description[]
}

model Input {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  value          Value       @relation(fields: [value_id], references: [id])
  value_id       String
  computation    Computation @relation(fields: [computation_id], references: [id])
  computation_id String
}

model Output {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  value          Value       @relation(fields: [value_id], references: [id])
  value_id       String
  computation    Computation @relation(fields: [computation_id], references: [id])
  computation_id String      @unique
}

model Computation {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  inputs      Input[]
  output      Output?
  computer    Computer @relation(fields: [computer_id], references: [id])
  computer_id String
}

model Computer {
  id             String        @id @default(uuid())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  description    Description   @relation(fields: [description_id], references: [id])
  description_id String
  simulation     Simulation    @relation(fields: [simulation_id], references: [id])
  simulation_id  String        @unique
  network        Network       @relation(fields: [network_id], references: [id], onDelete: Cascade)
  network_id     String
  computations   Computation[]
  process        Process?
  variable       Variable?
  type           Type?
  machine        Machine?
  generation     Generation?
}

model Parameter {
  id           String       @id @default(uuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  value        Value        @relation(fields: [value_id], references: [id])
  value_id     String
  simulations  Simulation[]
  generations  Generation[]
  evolutions   Evolution[]
  trajectories Trajectory[]
}

model Feedback {
  id           String       @id @default(uuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  value        Value        @relation(fields: [value_id], references: [id])
  value_id     String
  simulations  Simulation[]
  generations  Generation[]
  evolutions   Evolution[]
  trajectories Trajectory[]
}

model Simulation {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  computer      Computer?
  value         Value?
  parameter     Parameter    @relation(fields: [parameter_id], references: [id])
  parameter_id  String
  feedback      Feedback     @relation(fields: [feedback_id], references: [id])
  feedback_id   String
  generation    Generation   @relation(fields: [generation_id], references: [id])
  generation_id String
  parents       Trajectory[] @relation("trajectory_parent")
  children      Trajectory[] @relation("trajectory_child")
}

model Generation {
  id           String       @id @default(uuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  computer     Computer     @relation(fields: [computer_id], references: [id])
  computer_id  String       @unique
  parameter    Parameter    @relation(fields: [parameter_id], references: [id])
  parameter_id String
  feedback     Feedback     @relation(fields: [feedback_id], references: [id])
  feedback_id  String
  previous     Evolution?   @relation("to_generation")
  next         Evolution?   @relation("from_generation")
  instances    Simulation[]
}

model Evolution {
  id           String     @id @default(uuid())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  parameter    Parameter  @relation(fields: [parameter_id], references: [id])
  parameter_id String
  feedback     Feedback   @relation(fields: [feedback_id], references: [id])
  feedback_id  String
  from         Generation @relation("from_generation", fields: [from_id], references: [id])
  from_id      String     @unique
  to           Generation @relation("to_generation", fields: [to_id], references: [id])
  to_id        String     @unique
}

model Trajectory {
  id           String     @id @default(uuid())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  parent       Simulation @relation("trajectory_parent", fields: [parent_id], references: [id])
  parent_id    String
  child        Simulation @relation("trajectory_child", fields: [child_id], references: [id])
  child_id     String
  parameter    Parameter  @relation(fields: [parameter_id], references: [id])
  parameter_id String
  feedback     Feedback   @relation(fields: [feedback_id], references: [id])
  feedback_id  String
}

model Network {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  machines   Machine[]
  computers  Computer[]
}
