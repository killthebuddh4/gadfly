generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Transformation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  operation  String
  target     Set      @relation("transformation_target", fields: [target_id], references: [id])
  target_id  String   @unique
  payload    Set      @relation("transformation_payload", fields: [payload_id], references: [id])
  payload_id String   @unique
  result     Set      @relation("transformation_result", fields: [result_id], references: [id])
  result_id  String   @unique
  type       Type     @relation(fields: [type_id], references: [id])
  type_id    String
}

model Type {
  id          String                @id @default(uuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  history     Transformation[]
  independent IndependentVariable[]
  dependent   DependentVariable[]
  bound       BoundVariable[]
  actor       Actor                 @relation(fields: [actor_id], references: [id])
  actor_id    String                @unique
}

model Set {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  target    Transformation? @relation("transformation_target")
  payload   Transformation? @relation("transformation_payload")
  result    Transformation? @relation("transformation_result")
}

model IndependentVariable {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String     @unique
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String
}

model DependentVariable {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String     @unique
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String     @unique
}

model BoundVariable {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String     @unique
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String     @unique
}

model Expression {
  id          String                @id @default(uuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  actor       Actor                 @relation(fields: [actor_id], references: [id])
  actor_id    String                @unique
  dependent   DependentVariable[]
  independent IndependentVariable[]
  bound       BoundVariable[]
}

model Mutation {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  code        String
  target      Value    @relation("mutation_target", fields: [target_id], references: [id])
  target_id   String   @unique
  payload     Value    @relation("mutation_payload", fields: [payload_id], references: [id])
  payload_id  String   @unique
  result      Value    @relation("mutation_result", fields: [result_id], references: [id])
  result_id   String   @unique
  variable    Variable @relation(fields: [variable_id], references: [id])
  variable_id String
}

model Value {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  target    Mutation? @relation("mutation_target")
  payload   Mutation? @relation("mutation_payload")
  result    Mutation? @relation("mutation_result")
  value     String
}

model Variable {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  history     Mutation[]
  independent IndependentVariable?
  dependent   DependentVariable?
  bound       BoundVariable?
  parents     Binding[]            @relation("parent_binding")
  children    Binding[]            @relation("child_binding")
  actor       Actor                @relation(fields: [actor_id], references: [id])
  actor_id    String               @unique
}

model Binding {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Variable @relation("parent_binding", fields: [parent_id], references: [id])
  parent_id String
  child     Variable @relation("child_binding", fields: [child_id], references: [id])
  child_id  String
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      Outbox   @relation(fields: [from_id], references: [id])
  from_id   String
  to        Inbox    @relation(fields: [to_id], references: [id])
  to_id     String
  code      String
  message   String
}

model Inbox {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  actor     Actor?
}

model Outbox {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  actor     Actor?
}

model Actor {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  inbox      Inbox       @relation(fields: [inbox_id], references: [id])
  inbox_id   String      @unique
  outbox     Outbox      @relation(fields: [outbox_id], references: [id])
  outbox_id  String      @unique
  network    Network?    @relation(fields: [network_id], references: [id])
  network_id String?     @unique
  expression Expression?
  type       Type?
  variable   Variable?
  organism   Organism?
}

model Generation {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  previous  Transition? @relation("to_generation")
  next      Transition? @relation("from_generation")
}

model Transition {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  from      Generation @relation("from_generation", fields: [from_id], references: [id])
  from_id   String     @unique
  to        Generation @relation("to_generation", fields: [to_id], references: [id])
  to_id     String     @unique
}

model Organism {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  actor     Actor      @relation(fields: [actor_id], references: [id])
  actor_id  String     @unique
  parents   Ancestry[] @relation("ancestry_parent")
  children  Ancestry[] @relation("ancestry_child")
}

model Ancestry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Organism @relation("ancestry_parent", fields: [parent_id], references: [id])
  parent_id String
  child     Organism @relation("ancestry_child", fields: [child_id], references: [id])
  child_id  String
}

model Network {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  actors    Actor[]
}
