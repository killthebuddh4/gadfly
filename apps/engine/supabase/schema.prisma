generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Operation {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String
  argument    Argument?
  mutation    Mutation?
  result      Result?
  variable    Variable  @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id String
}

model Mutation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  operation    Operation @relation(fields: [operation_id], references: [id], onDelete: Cascade)
  operation_id String    @unique
  signal       Signal    @relation(fields: [signal_id], references: [id])
  signal_id    String    @unique
}

model Argument {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  operation    Operation @relation(fields: [operation_id], references: [id], onDelete: Cascade)
  operation_id String    @unique
  value        Value     @relation(fields: [value_id], references: [id], onDelete: Cascade)
  value_id     String
}

model Result {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  operation    Operation @relation(fields: [operation_id], references: [id], onDelete: Cascade)
  operation_id String    @unique
  value        Value     @relation(fields: [value_id], references: [id], onDelete: Cascade)
  value_id     String
}

model Variable {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  history   Operation[]
  role      String
  input     Input?
  output    Output?
}

model Input {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  variable    Variable @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id String   @unique
  actor       Actor    @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  actor_id    String
  type        String

  @@unique([variable_id, actor_id])
}

model Output {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  variable    Variable @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id String   @unique
  actor       Actor    @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  actor_id    String
  type        String

  @@unique([variable_id, actor_id])
}

model Actor {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  network    Network? @relation(fields: [network_id], references: [id])
  network_id String?
  inputs     Input[]
  outputs    Output[]
}

model Signal {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  text      String
  // A signal is always part of a value or it is a mutation.
  value     Value?    @relation(fields: [value_id], references: [id], onDelete: Cascade)
  value_id  String?
  mutation  Mutation?
}

model Value {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  signals   Signal[]
  argument  Argument[]
  result    Result[]
}

model Network {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  actors    Actor[]
}
