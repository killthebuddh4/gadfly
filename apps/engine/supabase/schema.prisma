generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Network {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  graphs     Graph[]
}

model Value {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  value       String
  node        Node?
  edge        Edge?
  instruction Instruction?
  signal      Signal?
  feedback    Feedback?
}

model Feedback {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  value      Value    @relation(fields: [value_id], references: [id])
  value_id   String   @unique
  signal     Signal   @relation(fields: [signal_id], references: [id])
  signal_id  String   @unique
}

model Signal {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  // Synthetic | Analytic
  flow       String
  value      Value     @relation(fields: [value_id], references: [id])
  value_id   String    @unique
  edge       Edge      @relation(fields: [edge_id], references: [id])
  edge_id    String
  feedback   Feedback?
}

model Actor {
  id           String        @id @default(uuid())
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id           String        @id @default(uuid())
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  actor        Actor         @relation(fields: [actor_id], references: [id])
  actor_id     String
  instructions Instruction[]
}

model Instruction {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id String
  code           Int
  value          Value?      @relation(fields: [value_id], references: [id])
  value_id       String?     @unique
  target_node    Node?       @relation(fields: [target_node_id], references: [id])
  target_node_id String?     @unique
  target_edge    Edge?       @relation(fields: [target_edge_id], references: [id])
  target_edge_id String?     @unique
}

model Graph {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  network    Network  @relation(fields: [network_id], references: [id])
  network_id String
  nodes      Node[]
  edges      Edge[]
}

model Node {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  graph       Graph        @relation(fields: [graph_id], references: [id])
  graph_id    String
  instruction Instruction?
  parents     Edge[]       @relation("edge_parent")
  children    Edge[]       @relation("edge_child")
  value       Value?       @relation(fields: [value_id], references: [id])
  value_id    String?      @unique
}

model Edge {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  graph       Graph        @relation(fields: [graph_id], references: [id])
  graph_id    String
  instruction Instruction?
  parent      Node         @relation("edge_parent", fields: [parent_id], references: [id])
  parent_id   String
  child       Node         @relation("edge_child", fields: [child_id], references: [id])
  child_id    String
  value       Value        @relation(fields: [value_id], references: [id])
  value_id    String       @unique
  signals     Signal[]
}
