generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Transformation {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  operation  String
  target     Set      @relation("transformation_target", fields: [target_id], references: [id])
  target_id  String   @unique
  payload    Set      @relation("transformation_payload", fields: [payload_id], references: [id])
  payload_id String   @unique
  result     Set      @relation("transformation_result", fields: [result_id], references: [id])
  result_id  String   @unique
  type       Type     @relation(fields: [type_id], references: [id])
  type_id    String
}

model Type {
  id          String                @id @default(uuid())
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  history     Transformation[]
  actor       Actor                 @relation(fields: [actor_id], references: [id])
  actor_id    String                @unique
  independent IndependentVariable[]
  dependent   DependentVariable[]
  bound       BoundVariable[]
}

model Set {
  id          String          @id @default(uuid())
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  target      Transformation? @relation("transformation_target")
  payload     Transformation? @relation("transformation_payload")
  result      Transformation? @relation("transformation_result")
  description String
}

model IndependentVariable {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String     @unique
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String
}

model DependentVariable {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String     @unique
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String     @unique
}

model BoundVariable {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  type          Type       @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       String
  variable      Variable   @relation(fields: [variable_id], references: [id], onDelete: Cascade)
  variable_id   String
  expression    Expression @relation(fields: [expression_id], references: [id], onDelete: Cascade)
  expression_id String
}

model Expression {
  id          String                @id @default(uuid())
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  dependent   DependentVariable[]
  independent IndependentVariable[]
  bound       BoundVariable[]
  actor       Actor                 @relation(fields: [actor_id], references: [id])
  actor_id    String                @unique
}

model Mutation {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  code        String
  target      Value    @relation("mutation_target", fields: [target_id], references: [id])
  target_id   String   @unique
  payload     Value    @relation("mutation_payload", fields: [payload_id], references: [id])
  payload_id  String   @unique
  result      Value    @relation("mutation_result", fields: [result_id], references: [id])
  result_id   String   @unique
  variable    Variable @relation(fields: [variable_id], references: [id])
  variable_id String
}

model Value {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  target     Mutation? @relation("mutation_target")
  payload    Mutation? @relation("mutation_payload")
  result     Mutation? @relation("mutation_result")
  value      String
}

model Variable {
  id          String               @id @default(uuid())
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  history     Mutation[]
  independent IndependentVariable?
  dependent   DependentVariable?
  bindings    BoundVariable[]
  actor       Actor                @relation(fields: [actor_id], references: [id])
  actor_id    String               @unique
}

model Message {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  from       Outbox   @relation(fields: [from_id], references: [id])
  from_id    String
  to         Inbox[]
  code       String
  message    String
}

model Inbox {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  actor      Actor?
}

model Outbox {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  actor      Actor?
}

model Actor {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  inbox      Inbox       @relation(fields: [inbox_id], references: [id])
  inbox_id   String      @unique
  outbox     Outbox      @relation(fields: [outbox_id], references: [id])
  outbox_id  String      @unique
  network    Network     @relation(fields: [network_id], references: [id])
  network_id String
  type       Type?
  variable   Variable?
  expression Expression?
  trajectory Trajectory?
}

model Simulation {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  generations Generation[]
}

model Trajectory {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  generation    Generation @relation(fields: [generation_id], references: [id])
  generation_id String
  parents       Ancestry[] @relation("ancestry_parent")
  children      Ancestry[] @relation("ancestry_child")
  actor         Actor      @relation(fields: [actor_id], references: [id])
  actor_id      String     @unique
}

model Generation {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  simulation    Simulation   @relation(fields: [simulation_id], references: [id])
  simulation_id String
  previous      Transition?  @relation("to_generation")
  next          Transition?  @relation("from_generation")
  trajectories  Trajectory[]
}

model Transition {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  from       Generation @relation("from_generation", fields: [from_id], references: [id])
  from_id    String     @unique
  to         Generation @relation("to_generation", fields: [to_id], references: [id])
  to_id      String     @unique
}

model Ancestry {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  parent     Trajectory @relation("ancestry_parent", fields: [parent_id], references: [id])
  parent_id  String
  child      Trajectory @relation("ancestry_child", fields: [child_id], references: [id])
  child_id   String
}

model Network {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  actors     Actor[]
}
