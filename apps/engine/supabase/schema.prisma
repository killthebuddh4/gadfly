generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Log {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  commits    Commit[]
  patches    Patch[]
  forks      Fork[]
  branches   Branch[]
}

model Commit {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  log        Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id     String
  fork       Fork     @relation(fields: [fork_id], references: [id], onDelete: Cascade)
  fork_id    String
  branch     Branch   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  branch_id  String
  upstream   Patch[]  @relation("patch_to")
  downstream Patch[]  @relation("patch_from")
  state      State    @relation(fields: [state_id], references: [id], onDelete: Cascade)
  state_id   String
  signals    Signal[]
}

model Patch {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  log        Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id     String
  fork       Fork     @relation(fields: [fork_id], references: [id], onDelete: Cascade)
  fork_id    String
  branch     Branch   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  branch_id  String
  from       Commit   @relation("patch_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id    String
  to         Commit   @relation("patch_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id      String
}

model Fork {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  log        Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id     String
  commits    Commit[]
  patches    Patch[]
}

model Branch {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  log        Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id     String
  commits    Commit[]
  patches    Patch[]
}

model Machine {
  id           String       @id @default(uuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  phases       Phase[]
  rules        Rule[]
  trajectories Trajectory[]
  interfaces   Interface[]
}

model Interface {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  machine    Machine  @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  phase      Phase    @relation(fields: [phase_id], references: [id])
  phase_id   String   @unique
}

model Phase {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  machine    Machine    @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  upstream   Rule[]     @relation("rule_to")
  downstream Rule[]     @relation("rule_from")
  states     State[]
  interface  Interface?
}

model Rule {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  machine    Machine  @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  from       Phase    @relation("rule_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id    String
  to         Phase    @relation("rule_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id      String
}

model Trajectory {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  machine     Machine      @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id  String
  states      State[]
  signals     Signal[]
  transitions Transition[]
}

model State {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  trajectory    Trajectory   @relation(fields: [trajectory_id], references: [id], onDelete: Cascade)
  trajectory_id String
  value         String
  phase         Phase        @relation(fields: [phase_id], references: [id], onDelete: Cascade)
  phase_id      String
  upstream      Transition?  @relation("transition_to")
  downstream    Transition[] @relation("transition_from")
  commits       Commit[]
  signals       Signal[]
}

model Transition {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  trajectory    Trajectory @relation(fields: [trajectory_id], references: [id], onDelete: Cascade)
  trajectory_id String
  from          State      @relation("transition_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id       String
  to            State      @relation("transition_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id         String     @unique
}

model Signal {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  trajectory    Trajectory @relation(fields: [trajectory_id], references: [id], onDelete: Cascade)
  trajectory_id String
  target        State      @relation(fields: [target_id], references: [id], onDelete: Cascade)
  target_id     String
  commit        Commit     @relation(fields: [commit_id], references: [id], onDelete: Cascade)
  commit_id     String
}
