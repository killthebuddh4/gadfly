generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Log {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commits   Commit[]
  patches   Patch[]
  forks     Fork[]
  branches  Branch[]
}

model Fork {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  log       Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id    String
  commits   Commit[]
  patches   Patch[]
}

model Branch {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  log       Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id    String
  commits   Commit[]
  patches   Patch[]
}

model Commit {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  log        Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id     String
  fork       Fork     @relation(fields: [fork_id], references: [id], onDelete: Cascade)
  fork_id    String
  branch     Branch   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  branch_id  String
  upstream   Patch[]  @relation("patch_to")
  downstream Patch[]  @relation("patch_from")
}

model Patch {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  log       Log      @relation(fields: [log_id], references: [id], onDelete: Cascade)
  log_id    String
  fork      Fork     @relation(fields: [fork_id], references: [id], onDelete: Cascade)
  fork_id   String
  branch    Branch   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  branch_id String
  from      Commit   @relation("patch_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id   String
  to        Commit   @relation("patch_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id     String
}

model Machine {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  phases       Phase[]
  transitions  Transition[]
  trajectories Trajectory[]
}

model Phase {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  machine    Machine      @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  upstream   Transition[] @relation("transition_to")
  downstream Transition[] @relation("transition_from")
}

model Transition {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  machine    Machine  @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  from       Phase    @relation("transition_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id    String
  to         Phase    @relation("transition_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id      String
}

model Trajectory {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  machine    Machine  @relation(fields: [machine_id], references: [id], onDelete: Cascade)
  machine_id String
  states     State[]
  signals    Signal[]
}

model State {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  trajectory    Trajectory @relation(fields: [trajectory_id], references: [id], onDelete: Cascade)
  trajectory_id String
  upstream      Signal[]   @relation("signal_to")
  downstream    Signal[]   @relation("signal_from")
}

model Signal {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  trajectory    Trajectory @relation(fields: [trajectory_id], references: [id], onDelete: Cascade)
  trajectory_id String
  from          State      @relation("signal_from", fields: [from_id], references: [id], onDelete: Cascade)
  from_id       String
  to            State      @relation("signal_to", fields: [to_id], references: [id], onDelete: Cascade)
  to_id         String
}
