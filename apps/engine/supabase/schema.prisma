generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Expression {
  id          String     @id @default(uuid())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  dependent   Variable[] @relation("variable_dependent")
  independent Variable[] @relation("variable_independent")
  bound       Variable[] @relation("variable_bound")
  free        Variable[] @relation("variable_free")
}

model Type {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  machine    Machine    @relation(fields: [machine_id], references: [id])
  machine_id String     @unique
  instances  Variable[]
}

model Variable {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  type           Type        @relation(fields: [type_id], references: [id])
  type_id        String
  machine        Machine     @relation(fields: [machine_id], references: [id])
  machine_id     String      @unique
  bound          Expression? @relation("variable_bound", fields: [bound_id], references: [id], onDelete: Cascade)
  bound_id       String?
  free           Expression? @relation("variable_free", fields: [free_id], references: [id], onDelete: Cascade)
  free_id        String?
  dependent      Expression? @relation("variable_dependent", fields: [dependent_id], references: [id], onDelete: Cascade)
  dependent_id   String?
  independent    Expression? @relation("variable_independent", fields: [independent_id], references: [id], onDelete: Cascade)
  independent_id String?
}

model Transition {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  type       String
  start      Signal   @relation("transition_start", fields: [start_id], references: [id])
  start_id   String
  event      Signal   @relation("transition_event", fields: [event_id], references: [id])
  event_id   String   @unique
  finish     Signal   @relation("transition_finish", fields: [finish_id], references: [id])
  finish_id  String
  machine    Machine  @relation(fields: [machine_id], references: [id])
  machine_id String
}

model Machine {
  id         String       @id @default(uuid())
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  network    Network      @relation(fields: [network_id], references: [id])
  network_id String
  state      Transition[]
  Type       Type?
  Variable   Variable?
}

model Signal {
  id         String       @id @default(uuid())
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  value      String
  starts     Transition[] @relation("transition_start")
  finishes   Transition[] @relation("transition_finish")
  events     Transition[] @relation("transition_event")
  inputs     Input[]
  output     Output[]
}

model Input {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  signal         Signal      @relation(fields: [signal_id], references: [id])
  signal_id      String
  computation    Computation @relation(fields: [computation_id], references: [id])
  computation_id String
}

model Output {
  id             String      @id @default(uuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  signal         Signal      @relation(fields: [signal_id], references: [id])
  signal_id      String
  computation    Computation @relation(fields: [computation_id], references: [id])
  computation_id String      @unique
}

model Computation {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  inputs      Input[]
  output      Output?
  computer    Computer @relation(fields: [computer_id], references: [id])
  computer_id String
}

model Computer {
  id           String        @id @default(uuid())
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  network      Network       @relation(fields: [network_id], references: [id], onDelete: Cascade)
  network_id   String
  computations Computation[]
}

model Simulation {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  generations Generation[]
}

model Generation {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  simulation    Simulation @relation(fields: [simulation_id], references: [id])
  simulation_id String
  parameter     String?
  feedback      String?
  previous      Evolution? @relation("to_generation")
  next          Evolution? @relation("from_generation")
  instances     Instance[]
}

model Evolution {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  parameter  String?
  feedback   String?
  from       Generation @relation("from_generation", fields: [from_id], references: [id])
  from_id    String     @unique
  to         Generation @relation("to_generation", fields: [to_id], references: [id])
  to_id      String     @unique
}

model Instance {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  generation    Generation   @relation(fields: [generation_id], references: [id])
  generation_id String
  parameter     String?
  feedback      String?
  parents       Trajectory[] @relation("trajectory_parent")
  children      Trajectory[] @relation("trajectory_child")
}

model Trajectory {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  parent     Instance @relation("trajectory_parent", fields: [parent_id], references: [id])
  parent_id  String
  child      Instance @relation("trajectory_child", fields: [child_id], references: [id])
  child_id   String
  parameter  String?
  feedback   String?
}

model Network {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  machines   Machine[]
  computers  Computer[]
}
