generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Type {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  type       Int
  values     Value[]
  graphs     Graph[]
  nodes      Node[]
  edges      Edge[]
  operations Operation[]
  references Pointer[]
}

model Value {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  type       Type       @relation(fields: [type_id], references: [id])
  type_id    String
  value      String
  graph      Graph?
  node       Node?
  edge       Edge?
  operation  Operation?
  references Pointer[]
}

model Graph {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  type       Type      @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?    @relation(fields: [value_id], references: [id])
  value_id   String?   @unique
  nodes      Node[]
  edges      Edge[]
  references Pointer[]
}

model Node {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  graph      Graph      @relation(fields: [graph_id], references: [id])
  graph_id   String
  upstream   Edge[]     @relation("edge_to")
  downstream Edge[]     @relation("edge_from")
  type       Type       @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?     @relation(fields: [value_id], references: [id])
  value_id   String?    @unique
  reference  Reference?
  references Pointer[]
}

model Edge {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  graph        Graph     @relation(fields: [graph_id], references: [id])
  graph_id     String
  from         Node      @relation("edge_from", fields: [from_id], references: [id])
  from_id      String
  to           Node?     @relation("edge_to", fields: [to_id], references: [id])
  to_id        String?
  type         Type      @relation(fields: [type_id], references: [id])
  type_id      String
  value        Value?    @relation(fields: [value_id], references: [id])
  value_id     String?   @unique
  operation    Operation @relation(fields: [operation_id], references: [id])
  operation_id String    @unique
  references   Pointer[]
}

model Operation {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  type       Type      @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?    @relation(fields: [value_id], references: [id])
  value_id   String?   @unique
  edges      Edge[]
  references Pointer[]
}

model Reference {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  node       Node     @relation(fields: [node_id], references: [id])
  node_id    String   @unique
  pointer    Pointer  @relation(fields: [pointer_id], references: [id])
  pointer_id String   @unique
}

model Pointer {
  id           String     @id @default(uuid())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  reference    Reference?
  value        Value?     @relation(fields: [value_id], references: [id])
  value_id     String?
  type         Type?      @relation(fields: [type_id], references: [id])
  type_id      String?
  node         Node?      @relation(fields: [node_id], references: [id])
  node_id      String?
  graph        Graph?     @relation(fields: [graph_id], references: [id])
  graph_id     String?
  edge         Edge?      @relation(fields: [edge_id], references: [id])
  edge_id      String?
  operation    Operation? @relation(fields: [operation_id], references: [id])
  operation_id String?
}
