generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Type {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  type       String
  syntheses  Synthesis[]
}

model Synthesis {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  type       Type     @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?   @relation(fields: [value_id], references: [id])
  value_id   String?  @unique
}

model Value {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  value      String
  synthesis  Synthesis?
  graph      Graph?
  node       Node?
  edge       Edge?
  pointer    Pointer?
  generation Generation?
}

model Graph {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  value      Value?   @relation(fields: [value_id], references: [id])
  value_id   String?  @unique
  nodes      Node[]
  edges      Edge[]
  pointer    Pointer?
}

model Node {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  graph      Graph    @relation(fields: [graph_id], references: [id])
  graph_id   String
  upstream   Edge[]   @relation("edge_to")
  downstream Edge[]   @relation("edge_from")
  value      Value?   @relation(fields: [value_id], references: [id])
  value_id   String?  @unique
  pointer    Pointer?
}

model Edge {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  graph      Graph    @relation(fields: [graph_id], references: [id])
  graph_id   String
  from       Node     @relation("edge_from", fields: [from_id], references: [id])
  from_id    String
  to         Node     @relation("edge_to", fields: [to_id], references: [id])
  to_id      String
  value      Value    @relation(fields: [value_id], references: [id])
  value_id   String   @unique
}

model Generation {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  value      Value     @relation(fields: [value_id], references: [id])
  value_id   String    @unique
  pointers   Pointer[]
}

// A POINTER MUST ALWAYS POINT TO A GRAPH THAT IS A LOG
model Pointer {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  generation    Generation @relation(fields: [generation_id], references: [id])
  generation_id String
  node          Node       @relation(fields: [node_id], references: [id])
  node_id       String     @unique
  to            Graph      @relation(fields: [to_id], references: [id])
  to_id         String     @unique
  value         Value      @relation(fields: [value_id], references: [id])
  value_id      String     @unique
}
