generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_CONN_STRING")
}

model Type {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  code        Int
  description String
  values      Value[]
  graphs      Graph[]
  nodes       Node[]
  edges       Edge[]
  generations Generation[]
  references  Pointer[]
}

model Value {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  type       Type        @relation(fields: [type_id], references: [id])
  type_id    String
  value      String
  graph      Graph?
  node       Node?
  edge       Edge?
  generation Generation?
  references Pointer[]
}

model Graph {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  type       Type      @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?    @relation(fields: [value_id], references: [id])
  value_id   String?   @unique
  nodes      Node[]
  edges      Edge[]
  references Pointer[]
}

model Node {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  graph      Graph     @relation(fields: [graph_id], references: [id])
  graph_id   String
  upstream   Edge[]    @relation("edge_to")
  downstream Edge[]    @relation("edge_from")
  type       Type      @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?    @relation(fields: [value_id], references: [id])
  value_id   String?   @unique
  pointer    Pointer?  @relation("pointer_from")
  references Pointer[] @relation("pointer_node")
}

model Edge {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  graph         Graph      @relation(fields: [graph_id], references: [id])
  graph_id      String
  from          Node       @relation("edge_from", fields: [from_id], references: [id])
  from_id       String
  to            Node?      @relation("edge_to", fields: [to_id], references: [id])
  to_id         String?
  type          Type       @relation(fields: [type_id], references: [id])
  type_id       String
  value         Value?     @relation(fields: [value_id], references: [id])
  value_id      String?    @unique
  generation    Generation @relation(fields: [generation_id], references: [id])
  generation_id String     @unique
  references    Pointer[]
}

model Generation {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  type       Type      @relation(fields: [type_id], references: [id])
  type_id    String
  value      Value?    @relation(fields: [value_id], references: [id])
  value_id   String?   @unique
  edges      Edge[]
  references Pointer[]
}

model Pointer {
  id            String      @id @default(uuid())
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  from          Node        @relation("pointer_from", fields: [from_id], references: [id])
  from_id       String      @unique
  value         Value?      @relation(fields: [value_id], references: [id])
  value_id      String?
  type          Type?       @relation(fields: [type_id], references: [id])
  type_id       String?
  node          Node?       @relation("pointer_node", fields: [node_id], references: [id])
  node_id       String?
  graph         Graph?      @relation(fields: [graph_id], references: [id])
  graph_id      String?
  edge          Edge?       @relation(fields: [edge_id], references: [id])
  edge_id       String?
  generation    Generation? @relation(fields: [generation_id], references: [id])
  generation_id String?
}
